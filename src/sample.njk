<head>
  <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

<script type="importmap">
  {
    "imports": {
      "three": "https://unpkg.com/three@0.141.0/build/three.module.js",
      "arnftthree" : "https://raw.githack.com/webarkit/ARnft-threejs/main/dist/ARnftThreejs.js",
      "arnft" : "@webarkit/ar-nft",
      "qrscanner" : "https://unpkg.com/qr-scanner@1.4.1/qr-scanner.min.js"
    }
  }
</script>


    </head>
    
    <body style='margin : 0px; overflow: hidden;'>
      <a href="https://raw.githubusercontent.com/artoolkitx/artoolkit5/master/doc/Marker%20images/pinball.jpg"
        class="ui marker" target="_blank">
        ðŸ–¼ Marker Image
    </a>
    <video loop autoplay muted webkit-playsinline playsinline crossOrigin="anonymous" id="arvideo">
        <source src="https://avo-content-dev.s3.amazonaws.com/videos/bg_1588085276090.mp4" type='video/mp4'>
    </video>

    <script src="https://raw.githack.com/webarkit/ARnft-threejs/main/dist/ARnftThreejs.js"></script>
    <script src="https://raw.githack.com/webarkit/ARnft/master/dist/ARnft.js"></script>
<script type="module">

  import * as THREE from 'three';

  const scene = new THREE.Scene();

</script>
    <script>
        let width = 640;
        let height = 480;
        ARnft.ARnft.init(width, height, [["/assets/descriptors/vimsquare"]], [['vimsquare']], '/arconfig.json', true)
            .then((nft) => {
                document.addEventListener('containerEvent', function (ev) {

                    let canvas = document.getElementById('canvas');
                    let fov = 0.8 * 180 / Math.PI;
                    let ratio = width / height;
                    let config = {
                        "renderer": {
                            "alpha": true,
                            "antialias": true,
                            "context": null,
                            "precision": "mediump",
                            "premultipliedAlpha": true,
                            "stencil": true,
                            "depth": true,
                            "logarithmicDepthBuffer": true
                        },
                        "camera": {
                            "fov": fov,
                            "ratio": ratio,
                            "near": 0.01,
                            "far": 1000
                        }
                    }

                    let sceneThreejs = new ARnftThreejs.SceneRendererTJS(config, canvas, nft.uuid,
                        true);
                    sceneThreejs.initRenderer();

                    let nftAddTJS = new ARnftThreejs.NFTaddTJS(nft.uuid);
                    nftAddTJS.oef = true;
                    // Set width, height and width and height number of segments of the PlaneGeometry.
                    let imgConfig = {w: 1, h: 1, ws: 1, hs: 1};
                    nftAddTJS.addVideo('arvideo', 'vimsquare', 180, imgConfig, false);

                    const tick = () => {
                        sceneThreejs.draw();
                        window.requestAnimationFrame(tick)
                    }
                    tick()
                })
            }).catch((error) => {
                console.log(error);
            });
    </script>
    </body>